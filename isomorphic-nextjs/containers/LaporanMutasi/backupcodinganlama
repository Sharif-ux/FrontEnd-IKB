// import React, { useEffect, useState, useRef} from 'react';
// import { Table, DatePicker, Select, Button,Modal } from 'antd';
// import { SearchOutlined } from '@ant-design/icons';
// import { Input, Space,  } from 'antd';
// import Highlighter from 'react-highlight-words';
// import moment from 'moment';
// import axios from 'axios';
// import { saveAs } from 'file-saver';
// import nextCookie from 'next-cookies';
// import cookie from 'js-cookie';
// // import { exportToPDF } from '../../components/utility/ExportDoc';
// import { ExportToCsv } from 'export-to-csv';
// import html2canvas from 'html2canvas';
// import ExcelJS from 'exceljs'; // Add this import statement
// import * as XLSX from 'xlsx';
// import { jsPDF } from 'jspdf';
// import { PDFViewer, Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';
// import 'jspdf-autotable';
// import LayoutContentWrapper from '@iso/components/utility/layoutWrapper';
// import LayoutContent from '@iso/components/utility/layoutContent';
// const { RangePicker } = DatePicker;
// const { Option } = Select;


// const Wip = () => {
//   const [data, setData] = useState([]);
//   const [dateRange, setDateRange] = useState(null);
//   const [filteredData, setFilteredData] = useState([]);
//   const [exportType, setExportType] = useState(null);
//   const [searchText, setSearchText] = useState('');
//   const [searchedColumn, setSearchedColumn] = useState('');
//   const [selectedRow, setSelectedRow] = useState(null);
//   const [selectedRowKeys, setSelectedRowKeys] = useState([]);
//   const [dt_Awal, setDt_Awal] = useState(null);
//   const [Kd_Brg, setKd_Brg] = useState('');
//   const [dt_Akhir, setDt_Akhir] = useState(null);
//   const [dataTrace, setDataTrace] = useState([])
//   const [visible, setVisible] = useState(false);
// const [disabled, setDisabled] = useState();
//   const searchInput = useRef(null);
//   const tableRef = useRef(null);
//   const dateFormat = 'DD/MM/YYYY';

//   const getColumnSearchProps = (dataIndex) => ({
//     filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
//       <div style={{ padding: 8 }}>
//         <Input
//           placeholder={`Search ${dataIndex}`}
//           value={selectedKeys[0]}
//           onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}
//           onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}
//           style={{ width: 188, marginBottom: 8, display: 'block' }}
//         />
//         <Space>
//           <button onClick={() => handleSearch(selectedKeys, confirm, dataIndex)} style={{ width: 90 }}>
//             Search
//           </button>
//           <button onClick={() => handleReset(clearFilters)} style={{ width: 90 }}>
//             Reset
//           </button>
//         </Space>
//       </div>
//     ),
//     filterIcon: (filtered) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,
//     onFilter: (value, record) =>
//       record[dataIndex] ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()) : '',
//     })
//     const getColumnDateProps = (dataIndex) => ({
//       filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
//         <div style={{ padding: 8 }}>
//           <DatePicker
//             style={{ marginBottom: 8, display: 'block' }}
//             value={selectedKeys[0]}
//             onChange={(date) => setSelectedKeys(date ? [date] : [])}
//             onPressEnter={() => {
//               confirm();
//               setSearchText(selectedKeys[0]);
//               setSearchedColumn(dataIndex);
//             }}
//           />
//           <Space>
//             <button onClick={() => handleSearch(selectedKeys, confirm, dataIndex)} style={{ width: 90 }}>
//               Search
//             </button>
//             <button onClick={() => handleReset(clearFilters)} style={{ width: 90 }}>
//               Reset
//             </button>
//           </Space>
//         </div>
//       ),
//       filterIcon: (filtered) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,
//       onFilter: (value, record) =>
//         record[dataIndex] ? moment(record[dataIndex]).isSame(value, 'day') : false,
//     });
//     // filterIcon: (filtered) => (
//     //   <SearchOutlined
//     //     style={{
//     //       color: filtered ? '#1677ff' : undefined,
//     //     }}
//     //   />
//     // ),
//     // onFilter: (value, record) =>
//     //   record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),
//     // onFilterDropdownOpenChange: (visible) => {
//     //   if (visible) {
//     //     setTimeout(() => searchInput.current?.select(), 100);
//     //   }
//     // },
//     const handleRowClick = (record) => {
//       const selectedRecord = data.find((item) => item.Kd_Brg === record.Kd_Brg);
  
//       if (selectedRecord) {
//         setSelectedRowKeys([record.Kd_Brg]);
//         setSelectedRow(selectedRecord);
//         console.log("Selected Row: ", selectedRecord);
//       } else {
//         setSelectedRowKeys([]);
//         setSelectedRow(null);
//       }
//     };
  
//     const rowSelection = {
//       type: 'radio',
//       selectedRowKeys,
//       onSelect: (record) => {
//         handleRowClick(record);
//       },
//     };

//     const isButtonDisabled = !dt_Awal || !dt_Akhir; // Check if either dt_Awal or dt_Akhir is null

//     //     const handleDateRangeChange = (dates) => {
//     //      setDt_Awal(dates[0]);
//     //   setDt_Akhir(dates[1]);
//     // };
//     const handleDateRangeChange = (dates) => {
//       if (dates && dates.length > 0) {
//         // Handle date range picker change event and set dt_Awal and dt_Akhir states
//         setDt_Awal(dates[0]);
//         setDt_Akhir(dates[1]);

//       } else {
//         // Handle null or empty dates scenario
//         setDt_Awal(null);
//         setDt_Akhir(null);
      
//       }
//     };
//     const callStoredProc = () => {
//       const Kd_Brg = selectedRowKeys[0];
//       const apiUrl = 'http://192.168.1.21:3000/storedprocedure'; 
  
//       axios
//         .get(apiUrl, {
//           params: {
//             Kd_Brg,
//             dt_Awal: dt_Awal.format('YYYY-MM-DD'),
//             dt_Akhir: dt_Akhir.format('YYYY-MM-DD'),
//           },
//         })
//         .then((response) => {
        
//           setDataTrace(response.data);
//           console.log(response.data);
//         })
//         .catch((error) => {
//           console.error(error);
//         });
//     };
//     console.log("setDataTrace", dataTrace)
//     const handleClick = () => {
//       showModal();
//       callStoredProc();
//     };
//     const handleSearch = (selectedKeys, confirm, dataIndex) => {
//       confirm();
//       setSearchText(selectedKeys[0]);
//       setSearchedColumn(dataIndex);
//     };
  
//     const handleReset = (clearFilters) => {
//       clearFilters();
//       setSearchText('');
//     };
//     render: (text) =>
//       searchedColumn === dataIndex ? (
//         <Highlighter
//           highlightStyle={{
//             backgroundColor: '#ffc069',
//             padding: 0,
//           }}
//           searchWords={[searchText]}
//           autoEscape
//           textToHighlight={text ? text.toString() : ''}
//         />
//       ) : (
//         text
//       )
//       const columnModal =[ {
//         title: 'No.',
//         dataIndex: 'index',
//         render: (text, record, index) => (
//           <div
//             style={{ cursor: 'pointer', fontWeight: selectedRowKeys.includes(record) ? 'bold' : 'normal' }}
//             onClick={() => handleTableClick(record)}
//           >
//             {index + 1}
//           </div>
//         ),
//         // render: (text, record, index) => index + 1, // Generate automation numbering
//       },
//       {
//         title: 'Sumber Trans',
//         dataIndex: 'Source_Trans',
//         key: 'Source_Trans',
//         ...getColumnSearchProps('Source_Trans'),
      
//       },
//       {
//         title: 'No Refrensi',
//         dataIndex: 'No_Reference',
//         key: 'No_Reference',
//         ...getColumnSearchProps('No_Reference'),
      
//       },
//       {
//         title: 'Keterangan',
//         dataIndex: 'Keterangan',
//         key: 'Keterangan',
//         ...getColumnSearchProps('Keterangan'),
//       },
//       {
//         title: 'Tanggal',
//         dataIndex: 'Date_Transaction',
//         key: 'Date_Transaction',   
//         render: (text) => {
//           const options = { year: 'numeric', month: 'numeric', day: 'numeric' };
//           const convertedDate = new Date(text).toLocaleDateString('id-ID', options);
//           return <span>{convertedDate}</span>;
//         },    
//         ...getColumnDateProps('Date_Transaction')
//       },
//       {
//         title: 'Harga',
//         dataIndex: 'Harga',
//         key: 'Harga',
//         ...getColumnSearchProps('Harga'),
//       },
//       {
//         title: 'Masuk',
//         dataIndex: 'IN_Brg',
//         key: 'IN_Brg',
//         ...getColumnSearchProps('IN_Brg'),
//       },
//       {
//         title: 'Keluar',
//         dataIndex: 'OUT_Brg',
//         key: 'OUT_Brg',
//         ...getColumnSearchProps('OUT_Brg'),
      
//       },
//       {
//         title: 'Penyusaian',
//         dataIndex: 'Adjust_Brg',
//         key: 'Adjust_Brg',
//         ...getColumnSearchProps('Adjust_Brg'),
      
//       },
//       {
//         title: 'Kode Barang',
//         dataIndex: 'Kd_Brg',
//         key: 'Kd_Brg',
//         ...getColumnSearchProps('Kd_Brg'),
      
//       },
//       {
//         title: 'Stock Opname',
//         dataIndex: 'Qty_Fisik',
//         key: 'Qty_Fisik',
//         ...getColumnSearchProps('Qty_Fisik'),
      
//       },
//       {
//         title: 'Saldo Akhir',
//         dataIndex: 'Qty_System',
//         key: 'Qty_System',
//         ...getColumnSearchProps('Qty_System'),
      
//       },
//       {
//         title: 'Saldo(QTY)',
//         dataIndex: 'Balance_QTY',
//         key: 'Balance_QTY',
//         ...getColumnSearchProps('Balance_QTY'),
      
//       }]
      
      
//   const columns = [
//     {
//       title: 'No.',
//       dataIndex: 'index',
//       render: (text, record, index) => index + 1, // Generate automation numbering
//     },
//     {
//       title: 'Kode Barang',
//       dataIndex: 'Kd_Brg',
//       key: 'Kd_Brg',

//       ...getColumnSearchProps('Kd_Brg'),
//     },
//     {
//       title: 'Nama Barang',
//       dataIndex: 'namabarang',
//       key: 'namabarang',

//       ...getColumnSearchProps('namabarang'),
//     },
//     {
//       title: 'Qty',
//       dataIndex: 'Qty',
//       key: 'Qty',    
     
//       ...getColumnSearchProps('Qty')

//     },
//     {
//       title: 'Satuan',
//       dataIndex: 'Satuan',
//       key: 'Satuan',
//       ...getColumnSearchProps('Satuan'),
//     },

  
//   ];
// //   useEffect(()=>{
// // const date = dt_Akhir && dt_Awal;
// // setDisabled = (()=> {
// //   if(date == null) {
// // true
// //   }
// //   else{
// //     false
// //   }
// // })
// //   },[])
//   useEffect(() => {
//     fetchData();
//   }, []);

//   useEffect(() => {
//     filterData();
//   }, [data, dateRange]);
//   useEffect(() => {
//     // Retrieve the token from the cookie
//     const token = cookie.get('token');
    
//     // Use the token here or send it to another function or API request
//     console.log('Token:', token);
//   }, []);
//   const fetchData = async () => {
//     try {
//       // Retrieve the token from the local storage
//       // const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InNhIiwiaWF0IjoxNjg3NzQ2MjQ0LCJleHAiOjE2ODc4MzI2NDR9.43cykjUUw80sCbAinLXSLiJlAp7oz-rQVmthToZuh2M8';
//       const token = cookie.get('token');

//       // Make the API request with the token included in the headers
//       const response = await fetch('http://192.168.1.21:3000/wip', {
//         headers: {
//           Authorization: `Bearer ${token}`,
//           'Content-Type': 'application/json'
//         }
//       });
//       if (response.ok) {
//         // Handle the successful response
//         const data = await response.json();
//         console.log('Data:', data);
//         setData(data.data)
//       } else {
//         // Handle the error response
//         const errorData = await response.json();
//         console.log('Error:', errorData);
//       }
//     } catch (error) {
//       // Handle network or server error
//       console.error('Error occurred during API request:', error);
//     }
//   };

//   const handleDateChange = (dates) => {
//     if (dates) {
//       setDateRange(dates);
//     } else {
//       setDateRange(null);
//     }
//   };

//   const handleExportTypeChange = (value) => {
//     setExportType(value);
//   };

//   const filterData = () => {
//     if (dateRange === null) {
//       setFilteredData(data);
//       return;
//     }
//     const filtered = data.filter((item) => {
//       const itemDate = moment(item.DOC_Date, 'YYYY-MM-DD');
//       return (
//         itemDate.isSameOrAfter(dateRange[0], 'day') &&
//         itemDate.isSameOrBefore(dateRange[1], 'day')
//       );
//     });
//     setFilteredData(filtered);
//   };
//   const exportToCSVModal = () => {
//     const csvExporter = new ExportToCsv({
//       fieldSeparator: ',',
//       quoteStrings: '"',
//       decimalSeparator: '.',
//       showLabels: true,  // Set to true to include column headers
//       showTitle: true,
//       useTextFile: false,
//       useBom: true,
//       filename: 'dataTraceStock',
//     });
  
//     const columnHeaders = {
//       "Sumber Trans": "Sumber Trans",
//       "No Refrensi": "No Refrensi",
//       "Keterangan": "Keterangan",
//       "Tanggal" : "Tanggal",
//       "Harga" : "Harga",
//       "Masuk" : "Masuk",
//       "Keluar" : "Keluar",
//       "Penyesuaian" : "Penyesuaian",
//       "Kode Barang" : "Kode Barang",
//       "Stock Opname" : "Stock Opname",
//       "Saldo Akhir" : "Saldo Akhir",
//       "Saldo(QTY)" : "Saldo(QTY)"
//     };
  
//     const exportedData = [
//       columnHeaders,  // Include the column headers as the first row
//       ...dataTrace.map((item) => ({
//         "Sumber Trans": item.Source_Trans,
//         "No Refrensi": item.No_Reference,
//         "Keterangan": item.Keterangan,
//         "Tanggal": item.Date_Transaction,
//         "Harga": item.Harga,
//         "Masuk": item.IN_Brg,
//         "Keluar": item.OUT_Brg,
//         "Penyesuaian": item.ADJ_Brg,
//         "Kode Barang": item.Kd_Brg,
//         "Stock Opname": item.Qty_Fisik,
//         "Saldo Akhir": item.Qty_System,
//         "Saldo(QTY)": item.Balance_QTY,
//       }))
//     ];
  
//     csvExporter.generateCsv(exportedData);
//   };
//   const exportToExcelModal = () => {
//     const exportedData = dataTrace.map((item) => ({
//       "Sumber Trans": item.Source_Trans,
//       "No Refrensi": item.No_Reference,
//       "Keterangan": item.Keterangan,
//       "Tanggal": item.Date_Transaction,
//       "Harga": item.Harga,
//       "Masuk": item.IN_Brg,
//       "Keluar": item.OUT_Brg,
//       "Penyesuaian": item.ADJ_Brg,
//       "Kode Barang": item.Kd_Brg,
//       "Stock Opname": item.Qty_Fisik,
//       "Saldo Akhir": item.Qty_System,
//       "Saldo(QTY)": item.Balance_QTY,
//       // 'Tanggal Transaksi': moment(item.TanggalTransaksi).format('YYYY-MM-DD'),
//     }));
  
//     const worksheet = XLSX.utils.json_to_sheet(exportedData);
//     const workbook = XLSX.utils.book_new();
//     XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');
  
//     const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
  
//     const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
//     const downloadUrl = URL.createObjectURL(blob);
//     const link = document.createElement('a');
//     link.href = downloadUrl;
//     link.download = 'dataTraceStock.xlsx';
//     link.click();
//   };
//   const exportToPDF2 = () => {
//     const doc = new jsPDF();

//     const tableContent2 = [];
//     const columns2 = Object.keys(dataTrace[0]);

//     dataTrace.forEach(row => {
//       const rowData = Object.values(row);
//       tableContent2.push(rowData);
//     });

//   const customHeader2 = ['Sumber Trans', 'No Refrensi', 'Nama Barang', 'Satuan', 'Saldo Awal', 'Pemasukan', 'Pengeluaran', 'Penyesuaian', 'Stock Opname', 'Saldo Akhir', 'Selisih'];
//   doc.autoTable({
//       head: [customHeader2],
//       body: tableContent2,
//     });

//     doc.save('dataTraceStock.pdf');
//   };
//   const exportToCSV = () => {
//     const csvExporter = new ExportToCsv({
//       fieldSeparator: ',',
//       quoteStrings: '"',
//       decimalSeparator: '.',
//       showLabels: true,  // Set to true to include column headers
//       showTitle: true,
//       useTextFile: false,
//       useBom: true,
//       filename:"WIP"
//     });
  
//     const columnHeaders = {
//       "Kode Barang": "Kode Barang",
//       "Nama Barang": "Nama Barang",
//       "Qty": "Qty",
//       "Satuan" : "Satuan",
      
//     };
  
//     const exportedData = [
//       columnHeaders,  // Include the column headers as the first row
//       ...filteredData.map((item) => ({
//         "Kode Barang": item.Kd_Brg,
//         "Nama Barang": item.namabarang,
//         "Qty": item.Qty,
//         "Satuan": item.Satuan,
        
//       }))
//     ];
  
//     csvExporter.generateCsv(exportedData);
//   };

//   const exportToExcel = () => {
//     const exportedData = filteredData.map((item) => ({
//       "Kode Barang": item.Kd_Brg,
//       "Nama Barang": item.namabarang,
//       "Satuan": item.Satuan,
//       "Qty": item.Qty,
//     }));
  
//     const worksheet = XLSX.utils.json_to_sheet(exportedData);
//     const workbook = XLSX.utils.book_new();
//     XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');
  
//     const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
  
//     const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
//     const downloadUrl = URL.createObjectURL(blob);
//     const link = document.createElement('a');
//     link.href = downloadUrl;
//     link.download = 'Wip.xlsx';
//     link.click();
//   };

//   const showModal = () => {
//     setVisible(true);
//   };

//   const handleOk = () => {
//     setVisible(false);
//   };

//   const handleCancel = () => {
//     setVisible(false);
//   };
//   const exportToPDF = async (data) => {
//     const doc = new jsPDF();
//     const tableContent = [];
//     const columns = Object.keys(data[0]);
  
//     data.forEach((row) => {
//       const rowData = Object.values(row);
//       tableContent.push(rowData);
//     });
//     const customHeader = ['No', 'Kode Barang', 'Nama Barang', 'Qty', 'Satuan'];
//     await doc.autoTable({
//       head: [customHeader],
//       body: tableContent,
//     });
  
//     doc.save('Wip.pdf');
//   };
//   return (
//     <LayoutContentWrapper style={{ height: '100%' }}>
//     <LayoutContent>
//     <div>
//     <div style={{ marginBottom: 16,  display: "flex", width: "100%", justifyContent: "center"}}>
//     <h1 style={{margin: "0 10px 0 0", fontSize: "18px"}}>Masukan Tanggal:</h1>
//     <RangePicker format={dateFormat}
//       renderExtraFooter={() => 'Custom footer'}
//       onChange={handleDateRangeChange} />
//         <Select
//           defaultValue="Export Type"
//           style={{ width: 120, marginLeft: 16 }}
//           onChange={handleExportTypeChange}
//         >
//           <Option value="csv">CSV</Option>
//           <Option value="excel">Excel</Option>
//           <Option value="pdf">PDF</Option>
//         </Select>
//         {exportType && (
//           <Button type="primary" onClick={() => {
//             if (exportType === 'csv') {
//               exportToCSV();
//             } else if (exportType === 'excel') {
//               exportToExcel();
//             } else if (exportType === 'pdf') {
//               exportToPDF(data);
//             }
//           }}>
//             Export {exportType.toUpperCase()}
//           </Button>
//         )}
//               <Button onClick={handleClick} disabled={isButtonDisabled} style={{marginLeft: 16,  backgroundColor: "#1f2431", color: "#efefef", borderRadius: "5px"}}>Kartu Stock</Button>
//               <Modal
//         title={`Trace Style Kode Barang - ${selectedRowKeys}`}
//         visible={visible}
//         onOk={handleOk}
//         onCancel={handleCancel}
//         width={1200}
//         footer
//       >
//         <div>
//         <div style={{ marginBottom: 16,  display: "flex", width: "100%", justifyContent: "center"}}>
//         <Select
//           defaultValue="Export Type"
//           style={{ width: 120, marginLeft: 16 }}
//           onChange={handleExportTypeChange}
//         >
//           <Option value="csvmodal">CSV</Option>
//           <Option value="excelmodal">Excel</Option>
//           <Option value="pdfmodal">PDF</Option>
//         </Select>
//         {exportType && (
//           <Button type="primary" onClick={() => {
//             if (exportType === 'csvmodal') {
//               exportToCSVModal();
//             } else if (exportType === 'excelmodal') {
//               exportToExcelModal();
//             } else if (exportType === 'pdfmodal') {
//               exportToPDF2();
//             }
//           }}>
//             Export {exportType.toUpperCase()}
//           </Button>)}
//           </div>
//         <Table id="table-ref-modal" columns={columnModal} dataSource={dataTrace} scroll={{ x: 400 }} ref={tableRef} />
//         </div>
//       </Modal>
//       </div>
//       <Table id="table-ref" columns={columns} dataSource={filteredData} scroll={{ x: 400 }} ref={tableRef}  rowKey="Kd_Brg"
//         rowSelection={rowSelection}    onRow={(record) => ({
//           onClick: () => handleRowClick(record),
//         })}
//       />
//     </div>
//     </LayoutContent>
//       </LayoutContentWrapper>
//   );
// };

// export default Wip;
// import React, { useEffect, useState, useRef} from 'react';
// import { Table, DatePicker, Select, Button, Modal } from 'antd';
// import { SearchOutlined } from '@ant-design/icons';
// import { Input, Space,  } from 'antd';
// import Highlighter from 'react-highlight-words';
// import moment from 'moment';
// import axios from 'axios';
// import { saveAs } from 'file-saver';
// import nextCookie from 'next-cookies';
// import cookie from 'js-cookie';
// // import { exportToPDF } from '../../components/utility/ExportDoc';
// import { ExportToCsv } from 'export-to-csv';
// import html2canvas from 'html2canvas';
// import ExcelJS from 'exceljs'; // Add this import statement
// import * as XLSX from 'xlsx';
// import { jsPDF } from 'jspdf';
// import { PDFViewer, Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';
// import 'jspdf-autotable';
// import LayoutContentWrapper from '@iso/components/utility/layoutWrapper';
// import LayoutContent from '@iso/components/utility/layoutContent';
// const { RangePicker } = DatePicker;
// const { Option } = Select;
// const dateFormat = 'DD/MM/YYYY';


// const BarangJadi = () => {
//   const [data, setData] = useState([]);
//   const [dateRange, setDateRange] = useState(null);
//   const [filteredData, setFilteredData] = useState([]);
//   const [exportType, setExportType] = useState(null);
//   const [searchText, setSearchText] = useState('');
//   const [searchedColumn, setSearchedColumn] = useState('');
//   const [selectedRow, setSelectedRow] = useState(null);
//   const [selectedRowKeys, setSelectedRowKeys] = useState([]);
//   const [dt_Awal, setDt_Awal] = useState(null);
//   const [Kd_Brg, setKd_Brg] = useState('');
//   const [dt_Akhir, setDt_Akhir] = useState(null);
//   const [dataTrace, setDataTrace] = useState([])
//   const [dataTraceStyle, setDataTraceStyle] = useState([])
//   const [visible, setVisible] = useState(false);
//   const [visibleModal, setVisibleModal] = useState(false);
//   const searchInput = useRef(null);
//   const tableRef = useRef(null);
//   const getColumnSearchProps = (dataIndex) => ({
//     filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
//       <div style={{ padding: 8 }}>
//         <Input
//           placeholder={`Search ${dataIndex}`}
//           value={selectedKeys[0]}
//           onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}
//           onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}
//           style={{ width: 188, marginBottom: 8, display: 'block' }}
//         />
//         <Space>
//           <button onClick={() => handleSearch(selectedKeys, confirm, dataIndex)} style={{ width: 90 }}>
//             Search
//           </button>
//           <button onClick={() => handleReset(clearFilters)} style={{ width: 90 }}>
//             Reset
//           </button>
//         </Space>
//       </div>
//     ),
//     filterIcon: (filtered) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,
//     onFilter: (value, record) =>
//       record[dataIndex] ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()) : '',
//     })
//     const handleSearch = (selectedKeys, confirm, dataIndex) => {
//       confirm();
//       setSearchText(selectedKeys[0]);
//       setSearchedColumn(dataIndex);
//     };
  
//     // filterIcon: (filtered) => (
//     //   <SearchOutlined
//     //     style={{
//     //       color: filtered ? '#1677ff' : undefined,
//     //     }}
//     //   />
//     // ),
//     // onFilter: (value, record) =>
//     //   record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),
//     // onFilterDropdownOpenChange: (visible) => {
//     //   if (visible) {
//     //     setTimeout(() => searchInput.current?.select(), 100);
//     //   }
//     // },

   
//     const showModal = () => {
//       setVisible(true);
//     };
  
//     const handleOk = () => {
//       setVisible(false);
//     };
  
//     const handleCancel = () => {
//       setVisible(false);
//     };
//     const showModalStyle = () => {
//       setVisibleModal(true);
//     };
  
//     const handleOkModalStyle = () => {
//       setVisibleModal(false);
//     };
  
//     const handleCancelModalStyle = () => {
//       setVisibleModal(false);
//     };
//     //     const handleDateRangeChange = (dates) => {
//     //      setDt_Awal(dates[0]);
//     //   setDt_Akhir(dates[1]);
//     // };
//     const handleDateRangeChange = (dates) => {
//       if (dates && dates.length > 0) {
//         // Handle date range picker change event and set dt_Awal and dt_Akhir states
//         setDt_Awal(dates[0]);
//         setDt_Akhir(dates[1]);
//       } else {
//         // Handle null or empty dates scenario
//         setDt_Awal(null);
//         setDt_Akhir(null);
//       }
//     };
//     const callStoredProc = () => {
//       const Kd_Brg = selectedRowKeys[0];
//       const apiUrl = 'http://192.168.1.21:3000/storedprocedure'; 
  
//       axios
//         .get(apiUrl, {
//           params: {
//             Kd_Brg,
//             dt_Awal: dt_Awal.format('YYYY-MM-DD'),
//             dt_Akhir: dt_Akhir.format('YYYY-MM-DD'),
//           },
//         })
//         .then((response) => {
        
//           setDataTrace(response.data);
//           console.log(response.data);
//         })
//         .catch((error) => {
//           console.error(error);
//         });
//     };
//     const callStoredStyle = () => {
//       const Kd_Brg = selectedRowKeys[0];
//       const apiUrl = 'http://192.168.1.21:3000/storestyle'; 
  
//       axios
//         .get(apiUrl, {
//           params: {
//             Kd_Brg,
//           },
//         })
//         .then((response) => {
        
//           setDataTraceStyle(response.data);
//           console.log(response.data);
//         })
//         .catch((error) => {
//           console.error(error);
//         });
//     };
//     console.log("setDataTrace", dataTrace)

//     const handleReset = (clearFilters) => {
//       clearFilters();
//       setSearchText('');
//     };
//     render: (text) =>
//       searchedColumn === dataIndex ? (
//         <Highlighter
//           highlightStyle={{
//             backgroundColor: '#ffc069',
//             padding: 0,
//           }}
//           searchWords={[searchText]}
//           autoEscape
//           textToHighlight={text ? text.toString() : ''}
//         />
//       ) : (
//         text
//       )
//   const columns = [
//     {
//       title: 'No.',
//       dataIndex: 'index',
//       render: (text, record, index) => (
//         <div
//           style={{ cursor: 'pointer', fontWeight: selectedRowKeys.includes(record) ? 'bold' : 'normal' }}
//           onClick={() => handleTableClick(record)}
//         >
//           {index + 1}
//         </div>
//       ),
//       // render: (text, record, index) => index + 1, // Generate automation numbering
//     },
//     {
//       title: 'Kode Barang',
//       dataIndex: 'Kd_Brg',
//       key: 'Kd_Brg',

//       ...getColumnSearchProps('Kd_Brg'),
//     },
//     {
//       title: 'Nama Barang',
//       dataIndex: 'Nm_Brg',
//       key: 'Nm_Brg',

//       ...getColumnSearchProps('Nm_Brg'),
//     },
//     {
//       title: 'Satuan',
//       dataIndex: 'Unit_Desc',
//       key: 'Unit_Desc',

//       ...getColumnSearchProps('Unit_Desc'),
//     },
//     {
//       title: 'Saldo Awal',
//       dataIndex: 'Saldo_Awal',
//       key: 'Saldo_Awal',      
      
//       ...getColumnSearchProps('Saldo_Awal')

//     },
//     {
//       title: 'Pemasukan',
//       dataIndex: 'IN_Brg',
//       key: 'IN_Brg',
 
//       ...getColumnSearchProps('IN_Brg'),
  
//     },
//     {
//       title: 'Pengeluaran',
//       dataIndex: 'OUT_Brg',
//       key: 'OUT_Brg',
 
//       ...getColumnSearchProps('OUT_Brg')
//       },
//     {
//       title: 'Penyusaian',
//       dataIndex: 'Adjust_Brg',
//       key: 'Adjust_Brg',

//       ...getColumnSearchProps('Adjust_Brg'),
//       },
//     {
//       title: 'Stock Opname',
//       dataIndex: 'Qty_Fisik',
//       key: 'Qty_Fisik',

//       ...getColumnSearchProps('Qty_Fisik'),
  
//     },
//     {
//       title: 'Saldo Akhir',
//       dataIndex: 'Qty_System',
//       key: 'Qty_System',
 
//       ...getColumnSearchProps('Qty_System'),
  
//     },
//     {
//       title: 'Selisih',
//       dataIndex: 'selisih',
//       key: 'selisih',
 
//       ...getColumnSearchProps('selisih'),
      
  
//     },
//     // {
//     //   title: 'Tanggal Transaksi',
//     //   dataIndex: 'TanggalTransaksi',
//     //   key: 'TanggalTransaksi',
//     //   render: (text) => <span>{moment(text).format('YYYY-MM-DD')}</span>,
//     // },
//   ];
//   const isButtonDisabled = !dt_Awal || !dt_Akhir; // Check if either dt_Awal or dt_Akhir is null

//   useEffect(() => {
//     fetchData();
//   }, []);

//   useEffect(() => {
//     filterData();
//   }, [data, dateRange]);
//   useEffect(() => {
//     // Retrieve the token from the cookie
//     const token = cookie.get('token');
    
//     // Use the token here or send it to another function or API request
//     console.log('Token:', token);
//   }, []);
//   const fetchData = async () => {
//     try {
//       // Retrieve the token from the local storage
//       // const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InNhIiwiaWF0IjoxNjg3NzQ2MjQ0LCJleHAiOjE2ODc4MzI2NDR9.43cykjUUw80sCbAinLXSLiJlAp7oz-rQVmthToZuh2M8';
//       const token = cookie.get('token');

//       // Make the API request with the token included in the headers
//       const response = await fetch('http://192.168.1.21:3000/barangjadi', {
//         headers: {
//           Authorization: `Bearer ${token}`,
//           'Content-Type': 'application/json'
//         }
//       });
//       if (response.ok) {
//         // Handle the successful response
//         const data = await response.json();
//         console.log('Data:', data);
//         setData(data.data)
//       } else {
//         // Handle the error response
//         const errorData = await response.json();
//         console.log('Error:', errorData);
//       }
//     } catch (error) {
//       // Handle network or server error
//       console.error('Error occurred during API request:', error);
//     }
//   };

//   const handleDateChange = (dates) => {
//     if (dates) {
//       setDateRange(dates);
//     } else {
//       setDateRange(null);
//     }
//   };

//   const handleExportTypeChange = (value) => {
//     setExportType(value);
//   };

//   const filterData = () => {
//     if (dateRange === null) {
//       setFilteredData(data);
//       return;
//     }
//     const filtered = data.filter((item) => {
//       const itemDate = moment(item.DOC_Date, 'YYYY-MM-DD');
//       return (
//         itemDate.isSameOrAfter(dateRange[0], 'day') &&
//         itemDate.isSameOrBefore(dateRange[1], 'day')
//       );
//     });
//     setFilteredData(filtered);
//   };
//   const handleClick = () => {
//     showModal();
//     callStoredProc();
//   };
//   const handleClick2 = () => {
//     showModalStyle();
//     callStoredStyle();
//   };

//   const exportToCSVModalStyle = () => {
//     const csvExporter = new ExportToCsv({
//       fieldSeparator: ',',
//       quoteStrings: '"',
//       decimalSeparator: '.',
//       showLabels: true,  // Set to true to include column headers
//       showTitle: true,
//       useTextFile: false,
//       useBom: true,
//       filename: "BarangJadiTraceStyle"
//     });
  
//     const columnHeaders = {
//       "Sumber Trans": "Sumber Trans",
//       "No Refrensi": "No Refrensi",
//       "Keterangan": "Keterangan",
//       "Tanggal" : "Tanggal",
//       "Harga" : "Harga",
//       "Masuk" : "Masuk",
//       "Keluar" : "Keluar",
//       "Penyesuaian" : "Penyesuaian",
//       "Kode Barang" : "Kode Barang",
//       "Stock Opname" : "Stock Opname",
//       "Saldo Akhir" : "Saldo Akhir",
//       "Saldo(QTY)" : "Saldo(QTY)"
//     };
  
//     const exportedData = [
//       columnHeaders,  // Include the column headers as the first row
//       ...dataTrace.map((item) => ({
//         "Sumber Trans": item.Source_Trans,
//         "No Refrensi": item.No_Reference,
//         "Keterangan": item.Keterangan,
//         "Tanggal": item.Date_Transaction,
//         "Harga": item.Harga,
//         "Masuk": item.IN_Brg,
//         "Keluar": item.OUT_Brg,
//         "Penyesuaian": item.ADJ_Brg,
//         "Kode Barang": item.Kd_Brg,
//         "Stock Opname": item.Qty_Fisik,
//         "Saldo Akhir": item.Qty_System,
//         "Saldo(QTY)": item.Balance_QTY,
//       }))
//     ];
  
//     csvExporter.generateCsv(exportedData);
//   };
//   const exportToExcelModalTraceStyle = () => {
//     const exportedData = dataTrace.map((item) => ({
//       "Sumber Trans": item.Source_Trans,
//       "No Refrensi": item.No_Reference,
//       "Keterangan": item.Keterangan,
//       "Tanggal": item.Date_Transaction,
//       "Harga": item.Harga,
//       "Masuk": item.IN_Brg,
//       "Keluar": item.OUT_Brg,
//       "Penyesuaian": item.ADJ_Brg,
//       "Kode Barang": item.Kd_Brg,
//       "Stock Opname": item.Qty_Fisik,
//       "Saldo Akhir": item.Qty_System,
//       "Saldo(QTY)": item.Balance_QTY,
//       // 'Tanggal Transaksi': moment(item.TanggalTransaksi).format('YYYY-MM-DD'),
//     }));
  
//     const worksheet = XLSX.utils.json_to_sheet(exportedData);
//     const workbook = XLSX.utils.book_new();
//     XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');
  
//     const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
  
//     const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
//     const downloadUrl = URL.createObjectURL(blob);
//     const link = document.createElement('a');
//     link.href = downloadUrl;
//     link.download = 'BarangJadiTraceStyle.xlsx';
//     link.click();
//   };
//   const exportToPDF3 = () => {
//     const doc = new jsPDF();

//     const tableContent2 = [];
//     const columns2 = Object.keys(dataTrace[0]);

//     dataTrace.forEach(row => {
//       const rowData = Object.values(row);
//       tableContent2.push(rowData);
//     });

//   const customHeader2 = ['Sumber Trans', 'No Refrensi', 'Nama Barang', 'Satuan', 'Saldo Awal', 'Pemasukan', 'Pengeluaran', 'Penyesuaian', 'Stock Opname', 'Saldo Akhir', 'Selisih'];
//   doc.autoTable({
//       head: [customHeader2],
//       body: tableContent2,
//     });

//     doc.save('BarangJadiTrace.pdf');
//   };

//   const exportToCSVModal = () => {
//     const csvExporter = new ExportToCsv({
//       fieldSeparator: ',',
//       quoteStrings: '"',
//       decimalSeparator: '.',
//       showLabels: true,  // Set to true to include column headers
//       showTitle: true,
//       useTextFile: false,
//       useBom: true,
//       filename: "BarangJadiTrace"
//     });
  
//     const columnHeaders = {
//       "Sumber Trans": "Sumber Trans",
//       "No Refrensi": "No Refrensi",
//       "Keterangan": "Keterangan",
//       "Tanggal" : "Tanggal",
//       "Harga" : "Harga",
//       "Masuk" : "Masuk",
//       "Keluar" : "Keluar",
//       "Penyesuaian" : "Penyesuaian",
//       "Kode Barang" : "Kode Barang",
//       "Stock Opname" : "Stock Opname",
//       "Saldo Akhir" : "Saldo Akhir",
//       "Saldo(QTY)" : "Saldo(QTY)"
//     };
  
//     const exportedData = [
//       columnHeaders,  // Include the column headers as the first row
//       ...dataTrace.map((item) => ({
//         "Sumber Trans": item.Source_Trans,
//         "No Refrensi": item.No_Reference,
//         "Keterangan": item.Keterangan,
//         "Tanggal": item.Date_Transaction,
//         "Harga": item.Harga,
//         "Masuk": item.IN_Brg,
//         "Keluar": item.OUT_Brg,
//         "Penyesuaian": item.ADJ_Brg,
//         "Kode Barang": item.Kd_Brg,
//         "Stock Opname": item.Qty_Fisik,
//         "Saldo Akhir": item.Qty_System,
//         "Saldo(QTY)": item.Balance_QTY,
//       }))
//     ];
  
//     csvExporter.generateCsv(exportedData);
//   };
//   const exportToExcelModal = () => {
//     const exportedData = dataTrace.map((item) => ({
//       "Sumber Trans": item.Source_Trans,
//       "No Refrensi": item.No_Reference,
//       "Keterangan": item.Keterangan,
//       "Tanggal": item.Date_Transaction,
//       "Harga": item.Harga,
//       "Masuk": item.IN_Brg,
//       "Keluar": item.OUT_Brg,
//       "Penyesuaian": item.ADJ_Brg,
//       "Kode Barang": item.Kd_Brg,
//       "Stock Opname": item.Qty_Fisik,
//       "Saldo Akhir": item.Qty_System,
//       "Saldo(QTY)": item.Balance_QTY,
//       // 'Tanggal Transaksi': moment(item.TanggalTransaksi).format('YYYY-MM-DD'),
//     }));
  
//     const worksheet = XLSX.utils.json_to_sheet(exportedData);
//     const workbook = XLSX.utils.book_new();
//     XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');
  
//     const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
  
//     const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
//     const downloadUrl = URL.createObjectURL(blob);
//     const link = document.createElement('a');
//     link.href = downloadUrl;
//     link.download = 'BarangJadiTrace.xlsx';
//     link.click();
//   };
//   const exportToPDF2 = () => {
//     const doc = new jsPDF();

//     const tableContent2 = [];
//     const columns2 = Object.keys(dataTrace[0]);

//     dataTrace.forEach(row => {
//       const rowData = Object.values(row);
//       tableContent2.push(rowData);
//     });

//   const customHeader2 = ['Sumber Trans', 'No Refrensi', 'Nama Barang', 'Satuan', 'Saldo Awal', 'Pemasukan', 'Pengeluaran', 'Penyesuaian', 'Stock Opname', 'Saldo Akhir', 'Selisih'];
//   doc.autoTable({
//       head: [customHeader2],
//       body: tableContent2,
//     });

//     doc.save('BarangJadiTrace.pdf');
//   };

//   const exportToCSV = () => {
//     const csvExporter = new ExportToCsv({
//       fieldSeparator: ',',
//       quoteStrings: '"',
//       decimalSeparator: '.',
//       showLabels: true,  // Set to true to include column headers
//       showTitle: true,
//       useTextFile: false,
//       useBom: true,
// filename: "BarangJadi",
//     });
  
//     const columnHeaders = {
//       "Kode Barang": "Kode Barang",
//       "Nama Barang": "Nama Barang",
//       "Satuan": "Satuan",
//       "Saldo Awal" : "Saldo Awal",
//       "Pemasukan" : "Pemasukan",
//       "Pengeluaran" : "Pengeluaran",
//       "Penyesuaian" : "Penyesuaian",
//       "Stock Opname" : "Stock Opname",
//       "Nama Barang" : "Nama Barang",
//       "Saldo Akhir" : "Saldo Akhir",
//       "Selisih" : "Selisih"
//     };
  
//     const exportedData = [
//       columnHeaders,  // Include the column headers as the first row
//       ...filteredData.map((item) => ({
//         "Kode Barang": item.Kd_Brg,
//         "Nama Barang": item.Nm_Brg,
//         "Satuan": item.Unit_Desc,
//         "Saldo Awal": item.Saldo_Awal,
//         "Pemasukan": item.IN_Brg,
//         "Pengeluaran": item.OUT_Brg,
//         "Penyesuaian": item.Adjust_Brg,
//         "Stock Opname": item.Qty_Fisik,
//         "Nama Barang": item.Nm_Brg,
//         "Saldo Akhir": item.Qty_System,
//         "Selisih": item.selisih,
//       }))
//     ];
  
//     csvExporter.generateCsv(exportedData);
//   };
//   const getColumnDateProps = (dataIndex) => ({
//     filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
//       <div style={{ padding: 8 }}>
//         <DatePicker
//           style={{ marginBottom: 8, display: 'block' }}
//           value={selectedKeys[0]}
//           onChange={(date) => setSelectedKeys(date ? [date] : [])}
//           onPressEnter={() => {
//             confirm();
//             setSearchText(selectedKeys[0]);
//             setSearchedColumn(dataIndex);
//           }}
//         />
//         <Space>
//           <button onClick={() => handleSearch(selectedKeys, confirm, dataIndex)} style={{ width: 90 }}>
//             Search
//           </button>
//           <button onClick={() => handleReset(clearFilters)} style={{ width: 90 }}>
//             Reset
//           </button>
//         </Space>
//       </div>
//     ),
//     filterIcon: (filtered) => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,
//     onFilter: (value, record) =>
//       record[dataIndex] ? moment(record[dataIndex]).isSame(value, 'day') : false,
//   });
//   const exportToExcel = () => {
//     const exportedData = filteredData.map((item) => ({
//       "Kode Barang": item.Kd_Brg,
//       "Nama Barang": item.Nm_Brg,
//       "Satuan": item.Unit_Desc,
//       "Saldo Awal": item.Saldo_Awal,
//       "Pemasukan": item.IN_Brg,
//       "Pengeluaran": item.OUT_Brg,
//       "Penyesuaian": item.Adjust_Brg,
//       "Stock Opname": item.Qty_Fisik,
//       "Nama Barang": item.Nm_Brg,
//       "Saldo Akhir": item.Qty_System,
//       "Selisih": item.selisih,
//       // 'Tanggal Transaksi': moment(item.TanggalTransaksi).format('YYYY-MM-DD'),
//     }));
  
//     const worksheet = XLSX.utils.json_to_sheet(exportedData);
//     const workbook = XLSX.utils.book_new();
//     XLSX.utils.book_append_sheet(workbook, worksheet, 'Data');
  
//     const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });
  
//     const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
//     const downloadUrl = URL.createObjectURL(blob);
//     const link = document.createElement('a');
//     link.href = downloadUrl;
//     link.download = 'BarangJadi.xlsx';
//     link.click();
//   };
//   // const handleTableClick = (record) => {
//   //   setSelectedRowKeys([record.Kd_Brg]);
  
    
//   //   const selectedRecord = data.find((item) => item.Kd_Brg === record.Kd_Brg);
//   //   console.log("cek selectedRecord" ,selectedRecord)

//   //   if (selectedRecord) {
//   //     setKd_Brg(selectedRecord.Kd_Brg);
//   //     console.log("cek", selectedRecord.Kd_Brg)
//   //   } else {
//   //     setKd_Brg('');
//   //   }
//   // };
//   // const rowSelection = {
//   //   type: 'radio',
//   //   onSelect: (record) => {
//   //     setSelectedRow(record);
//   //   },
//   //   selectedRowKeys: selectedRow ? [selectedRow.Kd_Brg] : [],
//   // };
//   const handleRowClick = (record) => {
//     const selectedRecord = data.find((item) => item.Kd_Brg === record.Kd_Brg);

//     if (selectedRecord) {
//       setSelectedRowKeys([record.Kd_Brg]);
//       setSelectedRow(selectedRecord);
//       console.log("Selected Row: ", selectedRecord);
//     } else {
//       setSelectedRowKeys([]);
//       setSelectedRow(null);
//     }
//   };

//   const rowSelection = {
//     type: 'radio',
//     selectedRowKeys,
//     onSelect: (record) => {
//       handleRowClick(record);
//     },
//   };
//   const exportToPDF = async (data) => {
//     const doc = new jsPDF();
//     const tableContent = [];
//     const columns = Object.keys(data[0]);
  
//     data.forEach((row) => {
//       const rowData = Object.values(row);
//       tableContent.push(rowData);
//     });
//     const customHeader = ['No', 'Kode Barang', 'Nama Barang', 'Satuan', 'Saldo Awal', 'Pemasukan', 'Pengeluaran', 'Penyesuaian', 'Stock Opname', 'Saldo Akhir', 'Selisih'];
//     await doc.autoTable({
//       head: [customHeader],
//       body: tableContent,
//     });
  
//     doc.save('Barang_Jadi.pdf');
//   };
// const columnStyle = [
// {
//   title: "Style",
//   dataIndex: "Style",
//   key: "Style",
//   ...getColumnSearchProps('Style')
// },
// {
//   title: "Kode Barang",
//   dataIndex: "Kd_Brg",
//   index: "Kd_Brg",
//   ...getColumnSearchProps('Kd_Brg')

// },
// {
//   title: "Nama Barang",
//   dataIndex: "Nm_Brg",
//   index: "Nm_Brg",
//   ...getColumnSearchProps('Nm_Brg')

// },
// {
//   title: "QTY Out",
//   dataIndex: "OUT_Qty",
//   key: "OUT_Qty",
//   ...getColumnSearchProps('OUT_Qty')

// },
// {
//   title: "Satuan",
//   dataIndex: "Unit_Code",
//   key: "Unit_Code",
//   ...getColumnSearchProps('Unit_Code')

// },
// {
//   title: "Jenis Dok. BC",
//   dataIndex: "DOC_NO_Asal",
//   key: "DOC_NO_Asal",
//   ...getColumnSearchProps('DOC_NO_Asal')

// },
// {
//   title: "Tanggal Dok. BC",
//   dataIndex: "DOC_Date",
//   key: "DOC_Date",
//   ...getColumnSearchProps('DOC_NO_Asal')

// },
// ]
// const columnModal =[ {
//   title: 'No.',
//   dataIndex: 'index',
//   render: (text, record, index) => (
//     <div
//       style={{ cursor: 'pointer', fontWeight: selectedRowKeys.includes(record) ? 'bold' : 'normal' }}
//       onClick={() => handleTableClick(record)}
//     >
//       {index + 1}
//     </div>
//   ),
//   // render: (text, record, index) => index + 1, // Generate automation numbering
// },
// {
//   title: 'Sumber Trans',
//   dataIndex: 'Source_Trans',
//   key: 'Source_Trans',
//   ...getColumnSearchProps('Source_Trans'),

// },
// {
//   title: 'No Refrensi',
//   dataIndex: 'No_Reference',
//   key: 'No_Reference',
//   ...getColumnSearchProps('No_Reference'),

// },
// {
//   title: 'Keterangan',
//   dataIndex: 'Keterangan',
//   key: 'Keterangan',
//   ...getColumnSearchProps('Keterangan'),
// },
// {
//   title: 'Tanggal',
//   dataIndex: 'Date_Transaction',
//   key: 'Date_Transaction',   
//   render: (text) => {
//     const options = { year: 'numeric', month: 'numeric', day: 'numeric' };
//     const convertedDate = new Date(text).toLocaleDateString('id-ID', options);
//     return <span>{convertedDate}</span>;
//   },    
//   ...getColumnDateProps('Date_Transaction')
// },
// {
//   title: 'Harga',
//   dataIndex: 'Harga',
//   key: 'Harga',
//   ...getColumnSearchProps('Harga'),
// },
// {
//   title: 'Masuk',
//   dataIndex: 'IN_Brg',
//   key: 'IN_Brg',
//   ...getColumnSearchProps('IN_Brg'),
// },
// {
//   title: 'Keluar',
//   dataIndex: 'OUT_Brg',
//   key: 'OUT_Brg',
//   ...getColumnSearchProps('OUT_Brg'),

// },
// {
//   title: 'Penyusaian',
//   dataIndex: 'Adjust_Brg',
//   key: 'Adjust_Brg',
//   ...getColumnSearchProps('Adjust_Brg'),

// },
// {
//   title: 'Kode Barang',
//   dataIndex: 'Kd_Brg',
//   key: 'Kd_Brg',
//   ...getColumnSearchProps('Kd_Brg'),

// },
// {
//   title: 'Stock Opname',
//   dataIndex: 'Qty_Fisik',
//   key: 'Qty_Fisik',
//   ...getColumnSearchProps('Qty_Fisik'),

// },
// {
//   title: 'Saldo Akhir',
//   dataIndex: 'Qty_System',
//   key: 'Qty_System',
//   ...getColumnSearchProps('Qty_System'),

// },
// {
//   title: 'Saldo(QTY)',
//   dataIndex: 'Balance_QTY',
//   key: 'Balance_QTY',
//   ...getColumnSearchProps('Balance_QTY'),

// }]
//   return (
//     <LayoutContentWrapper style={{ height: '100%' }}>
//     <LayoutContent>
//     <div>
//     <div style={{ marginBottom: 16,  display: "flex", width: "100%", justifyContent: "center"}}>
//           <h1 style={{margin: "0 10px 0 0", fontSize: "18px"}}>Masukan Tanggal:</h1>
//           <RangePicker format={dateFormat}
//       renderExtraFooter={() => 'Custom footer'}
//       onChange={handleDateRangeChange} />
//         <Select
//           defaultValue="Export Type"
//           style={{ width: 120, marginLeft: 16 }}
//           onChange={handleExportTypeChange}
//         >
//           <Option value="csv">CSV</Option>
//           <Option value="excel">Excel</Option>
//           <Option value="pdf">PDF</Option>
//         </Select>
//         {exportType && (
//           <Button type="primary" onClick={() => {
//             if (exportType === 'csv') {
//               exportToCSV();
//             } else if (exportType === 'excel') {
//               exportToExcel();
//             } else if (exportType === 'pdf') {
//               exportToPDF(data);
//             }
//           }}>
//             Export {exportType.toUpperCase()}
//           </Button>
//         )}

//               <Button onClick={handleClick} disabled={isButtonDisabled} style={{marginLeft: 16,  backgroundColor: "#1f2431", color: "#efefef", borderRadius: "5px"}}>Kartu Stock</Button>
//               <Button onClick={handleClick2} style={{marginLeft: 16,  backgroundColor: "rgba(0, 0, 0, 0.85)", color: "white", borderRadius: "5px"}}>Trace Style</Button>
//               <Modal
//         title={`Trace Style Kode Barang - ${selectedRowKeys}`}
//         visible={visibleModal}
//         onOk={handleOkModalStyle}
//         onCancel={handleCancelModalStyle}
//         width={1200}
//         footer
//       >
//         <div>
//         <div style={{ marginBottom: 16,  display: "flex", width: "100%", justifyContent: "center"}}>
//         <Select
//           defaultValue="Export Type"
//           style={{ width: 120, marginLeft: 16 }}
//           onChange={handleExportTypeChange}
//         >
//           <Option value="csvmodal">CSV</Option>
//           <Option value="excelmodal">Excel</Option>
//           <Option value="pdfmodal">PDF</Option>
//         </Select>
//         {exportType && (
//           <Button type="primary" onClick={() => {
//             if (exportType === 'csvmodal') {
//               exportToCSVModalStyle();
//             } else if (exportType === 'excelmodal') {
//               exportToExcelModalTraceStyle();
//             } else if (exportType === 'pdfmodal') {
//               exportToPDF3();
//             }
//           }}>
//             Export {exportType.toUpperCase()}
//           </Button>)}
//           </div>
//         <Table id="table-ref-modal" columns={columnStyle} dataSource={dataTraceStyle} scroll={{ x: 400 }} ref={tableRef} />
//         </div>
//       </Modal>
//       <Modal
//         title={`Trace Stock Kode Barang - ${selectedRowKeys}`}
//         visible={visible}
//         onOk={handleOk}
//         onCancel={handleCancel}
//         width={1200}
//         footer
//       >
//         <div>
//         <div style={{ marginBottom: 16,  display: "flex", width: "100%", justifyContent: "center"}}>
//         <Select
//           defaultValue="Export Type"
//           style={{ width: 120, marginLeft: 16 }}
//           onChange={handleExportTypeChange}
//         >
//           <Option value="csvmodal">CSV</Option>
//           <Option value="excelmodal">Excel</Option>
//           <Option value="pdfmodal">PDF</Option>
//         </Select>
//         {exportType && (
//           <Button type="primary" onClick={() => {
//             if (exportType === 'csvmodal') {
//               exportToCSVModal();
//             } else if (exportType === 'excelmodal') {
//               exportToExcelModal();b
//             } else if (exportType === 'pdfmodal') {
//               exportToPDF2();
//             }
//           }}>
//             Export {exportType.toUpperCase()}
//           </Button>)}
//           </div>
//         <Table id="table-ref-modal" columns={columnModal} dataSource={dataTrace} scroll={{ x: 400 }} ref={tableRef} />
//         </div>
//       </Modal>
//       </div>
//         <Table id="table-ref" columns={columns} dataSource={filteredData} scroll={{ x: 400 }} ref={tableRef}  rowKey="Kd_Brg"
//         rowSelection={rowSelection}    onRow={(record) => ({
//           onClick: () => handleRowClick(record),
//         })}
//       />
// </div>

//     </LayoutContent>
//       </LayoutContentWrapper>
//   );
// };

// export default BarangJadi;

// import { PlusOutlined } from '@ant-design/icons';
// import {
//   Button,
//   Cascader,
//   Checkbox,
//   DatePicker,
//   Form,
//   Input,
//   InputNumber,
//   Radio,
//   Row,
//   Col,
//   Select,
//   Switch,
//   TreeSelect,
//   Upload,
//   Modal,
//   message 
// } from 'antd';
// import { useState, useEffect } from 'react';
// import axios from 'axios';
// const { RangePicker } = DatePicker;
// const { TextArea } = Input;
// const { Option } = Select;
// const normFile = (e) => {
//   if (Array.isArray(e)) {
//     return e;
//   }
//   return e?.fileList;
// };
// const onChange = (value) => {
//     console.log('changed', value);
//   };
//   const testvalue = 'IN/IKB/21/03/0001'

// const FormDisabledDemo = () => {
//   const [form] = Form.useForm();
//   const [formData, setFormData] = useState(null);
//   const [loading, setLoading] = useState(false);
//   const [month, setMonth] = useState(new Date().getMonth() + 1); // Add 1 because getMonth() returns zero-based index
//   const [year, setYear] = useState(new Date().getFullYear());
//   const [counter, setCounter] = useState(1);
//   const [rawinNo, setRawinNo] = useState(generateRawinNo());
//   const [styles, setStyles] = useState([]);
//   const [curr, setCurr] = useState([]);
//   const [pengirim, setPengirim] = useState([]);
//   const [kontrak, setKontrak] = useState([]);
//   const [negara, setNegara] = useState([]);
//   const [gudang, setGudang] = useState([]);
//   const [doctype, setDoctype] = useState([]);
//   const [generatedRAWIN_NO, setGeneratedRAWIN_NO] = useState('');

//   function generateRawinNo() {
//     const formattedMonth = month < 10 ? `0${month}` : month;
//     const formattedYear = year.toString().substr(2); // Get last two digits of the year
//     const formattedCounter = counter.toString().padStart(4, '0'); // Pad the counter with leading zeros up to four digits
//     return `IN/IKB/${formattedMonth}/${formattedYear}/${formattedCounter}`;
//   }

//   const updateRawinNo = () => {
//     const newRawinNo = generateRawinNo();
//     setRawinNo(newRawinNo);
//     form.setFieldsValue({ RAWIN_NO: newRawinNo });
//   };
// //styles endpoint
//   useEffect(() => {
//     axios.get('http://192.168.1.21:3000/stylesform')
//       .then(response => {
//         setStyles(response.data);
//       })
//       .catch(error => {
//         console.error('Error fetching data:', error);
//       });
//   }, []);
// //curr desc endpoint
//   useEffect(() => {
//     axios.get('http://192.168.1.21:3000/currdescform')
//       .then(response => {
//         setCurr(response.data);
//       })
//       .catch(error => {
//         console.error('Error fetching data:', error);
//       });
//   }, []);
//   //pengirim endpoint
//   useEffect(() => {
//     axios.get('http://192.168.1.21:3000/shipnameform')
//       .then(response => {
//         setPengirim(response.data);
//       })
//       .catch(error => {
//         console.error('Error fetching data:', error);
//       });
//   }, []);
//     //kontrak endpoint
//   useEffect(() => {
//     axios.get('http://192.168.1.21:3000/kontrakform')
//       .then(response => {
//         setKontrak(response.data);
//       })
//       .catch(error => {
//         console.error('Error fetching data:', error);
//       });
//   }, []);

//     //negara endpoint
//     useEffect(() => {
//       axios.get('http://192.168.1.21:3000/negaraform')
//         .then(response => {
//           setNegara(response.data);
//         })
//         .catch(error => {
//           console.error('Error fetching data:', error);
//         });
//     }, []);
//     //gudang endpoint
//     useEffect(() => {
//       axios.get('http://192.168.1.21:3000/gudangform')
//         .then(response => {
//           setGudang(response.data);
//         })
//         .catch(error => {
//           console.error('Error fetching data:', error);
//         });
//     }, []);

//         //bc endpoint
//         useEffect(() => {
//           axios.get('http://192.168.1.21:3000/bcform')
//             .then(response => {
//               setDoctype(response.data);
//             })
//             .catch(error => {
//               console.error('Error fetching data:', error);
//             });
//         }, []);
//   // const onFinish = async (values) => {
//   //   setLoading(true);
//   //   try {
//   //     const response = await axios.post('http://192.168.1.21:3000/submitform', values);
//   //     if (response.status === 200) {

//   //       message.success('Data inserted successfully!');
//   //       form.resetFields();
//   //     }
//   //   } catch (error) {
//   //     console.error('Error submitting form:', error);
//   //     message.error('Failed to insert data into the database.');
//   //   }
//   //   setLoading(false);
//   // };
//   // useEffect(() => {
//   //   // Fetch data from your Express.js server
//   //   fetch('http://192.168.1.21:3000/submitform')
//   //     .then((response) => response.json())
//   //     .then((data) => {
//   //       // Once you have the data, set the state with the generatedRAWIN_NO
//   //       setGeneratedRAWIN_NO(data.generatedRAWIN_NO);
//   //     })
//   //     .catch((error) => {
//   //       console.error('Error fetching data:', error);
//   //     });
//   // }, []);

//   // const onFinish = async (values) => {
//   //   setLoading(true);
//   //   try {
//   //     // Submit the form without the generatedRAWIN_NO
//   //     const response = await axios.post('http://192.168.1.21:3000/submitform', values);
//   //     if (response.status === 200) {
//   //       message.success('Data inserted successfully!');
//   //       form.resetFields();
//   //     }
//   //   } catch (error) {
//   //     console.error('Error submitting form:', error);
//   //     message.error('Failed to insert data into the database.');
//   //   }
//   //   setLoading(false);
//   // };
//   useEffect(() => {
//     // Fetch data from your Express.js server
//     fetch('http://192.168.1.21:3000/submitform')
//       .then((response) => response.json())
//       .then((data) => {
//         // Once you have the data, set the state with the generatedRAWIN_NO
//         setGeneratedRAWIN_NO(data.generatedRAWIN_NO);
//       })
//       .catch((error) => {
//         console.error('Error fetching data:', error);
//       });
//   }, []); // Empty dependency array to run only once on component mount
// console.log(generatedRAWIN_NO)
//   const onFinish = async (values) => {
//     setLoading(true);
//     try {
//       // Submit the form with the generatedRAWIN_NO
//       const response = await axios.post('http://192.168.1.21:3000/submitform', {
//         ...values,
//         RAWIN_NO: generatedRAWIN_NO // Include the generatedRAWIN_NO in the form submission
//       });
//       if (response.status === 200) {
//         message.success('Data inserted successfully!');
//         form.resetFields();
//       }
//     } catch (error) {
//       console.error('Error submitting form:', error);
//       message.error('Failed to insert data into the database.');
//     }
//     setLoading(false);
//   };
//   const handleSubmit = (values) => {
//     setFormData(values);
//   };
//     return (
//       <>

//         <Form
//           // labelCol={{
//           //   span: 4,
//           // }}
//         //   wrapperCol={{
//         //     span: 14,
//         //   }}
//           layout="horizontal"
//           style={{
//             Width: "100%",
//           }}
//           form={form} onFinish={onFinish}
//         >
            
//           {/* <Form.Item label="Checkbox"  valuePropName="checked">
//             <Checkbox>Checkbox</Checkbox>
//           </Form.Item>
//           <Form.Item label="Radio">
//             <Radio.Group>
//               <Radio value="apple"> Apple </Radio>
//               <Radio value="pear"> Pear </Radio>
//             </Radio.Group>
//           </Form.Item> */}
//         <Row gutter={16}>
//         <Col span={8}>
//             <Form.Item name="RAWIN_Date" label="RAWIN_Date">
//             <DatePicker style={{width: "100%"}}/>
//           </Form.Item>
//           </Col>
//           <Col span={8}>
//           <Form.Item name="RAWIN_NO" label="No Refrensi">
//           <Input value={generatedRAWIN_NO} disabled />
//           </Form.Item>  
//           </Col> 
//           <Col span={8}>  
//           <Form.Item name="RAWIN_Type" label="Jenis Transaksi" >
//             <Select  style={{ width: "100%",}}>
//               <Select.Option value="normal">Normal</Select.Option>
//               <Select.Option value="cmtin">Subcon/CMT IN</Select.Option>
//               <Select.Option value="cmtout">Subcon/CMT OUT</Select.Option>
//               <Select.Option value="wip">WIP</Select.Option>
//             </Select>
//           </Form.Item>
//           </Col>
//           </Row>
//           <Row gutter={16}>
//         <Col span={8}>       
//           <Form.Item name="STYLE_PO" label="Style">
//             <Select style={{ width: "100%",}}>
//             {styles.map(style => (
//         <Option key={style.Style} value={style.Style}>
//           {style.Style}
//         </Option>
//       ))}
//             </Select>
//           </Form.Item>  
//           </Col>  
//           <Col span={8}>      
//           <Form.Item name="Gudang_Code" label="Dikirim ke">
//             <Select>
//             {gudang.map(gudang => (
//         <Option key={gudang.Gudang_Code} value={gudang.Gudang_Code}>
//        {gudang.Gudang_Desc}
//         </Option>
//       ))}
//             </Select>
//           </Form.Item>
//           </Col>
//           <Col span={8}> 
//           <Form.Item name="Currency_Code" label="Jenis Uang">
//             <Select style={{ width: "100%",}}>
//             {curr.map(curr => (
//         <Option key={curr.Uang_Code} value={curr.Uang_Code}>
//           {curr.Uang_Desc}
//         </Option>
//       ))}
//             </Select>
//           </Form.Item>
//           </Col>
//           </Row>
//           <Form.Item name="RAWIN_Desc" label="Catatan">
//             <TextArea rows={4} />
//           </Form.Item>
//           <Row gutter={16}>
//         <Col span={8}>
//           <Form.Item name="Kurs" label="Rate">
//           <InputNumber min={1} max={999999999999} onChange={onChange}  style={{width: "100%"}}/>
//           </Form.Item>
//           </Col>
//           <Col span={10}>
//             <Row gutter='1'>
//               <Col sm={12} md={12} lg={12}>
//           <Form.Item name="DOC_Type" label="BC / Tanggal">
//           <Select>
//               <Select.Option value="bc">BC 1.0</Select.Option>
//               {doctype.map(doctype => (
//         <Option key={doctype.Doc_Type} value={doctype.Doc_Type}>
//        {doctype.Doc_Type}   ||  {doctype.Doc_Desc}
//         </Option>
//       ))}
//             </Select>
//             </Form.Item>
//             </Col>
//             <Col sm={12} md={12} lg={12}>
//             <Form.Item name="DOC_Date">
//             <DatePicker />
//           </Form.Item>
//           </Col>
//           </Row>
//           </Col>
//           <Col span={6}>
//           <Form.Item name="DOC_NO" label="No Dokumen">
//             <Input />
//           </Form.Item>
//           </Col>
//           </Row>
//           <Row gutter={16}>
//         <Col span={7}>
//           <Form.Item name="NO_REG" label="No Aju">
//             <Input />
//           </Form.Item>
//           </Col>
//           <Col span={7}>
//           <Form.Item name="Ship_Code" label="Pengirim">
//             <Select>
//             {pengirim.map(pengirim => (
//         <Option key={pengirim.Ship_Code} value={pengirim.Ship_Code}>
//        {pengirim.Ship_Code}   ||  {pengirim.Ship_Name}
//         </Option>
//       ))}
//             </Select>
//           </Form.Item>
//           </Col>
//           <Col span={10}>
//           <Form.Item name="Kontrak" label="No Kontrak">
//             <Select>
//             {kontrak.map(kontrak => (
//         <Option key={kontrak.Kontrak} value={kontrak.Kontrak}>
//        {kontrak.Kontrak}
//         </Option>
//       ))}
//             </Select>
//           </Form.Item>
//           </Col>
//           </Row>
//           <Row gutter={16}>
//         <Col span={8}>
//           <Form.Item name='PO_NO' label="PO. Number">
//             <Select>
//               <Select.Option value="academy">PO Number</Select.Option>
//             </Select>
//           </Form.Item>
//           </Col>
//           <Col span={8}>
//           <Form.Item name="INV_NO" label="No. Invoice">
//             <Input />
//           </Form.Item>
//           </Col>
//           <Col span={8}>
//           <Form.Item name="BL_NO" label="BL. No">
//             <Input />
//           </Form.Item>
//           </Col>
//           </Row>
//           <Row gutter={16}>
//         <Col span={8}>
//           <Form.Item name='no_fp' label="No. FP">
//             <Input />
//           </Form.Item>
//           </Col>
//           <Col span={8}>
//           <Form.Item name="Negara_Asal" label="Asal Negara">
//             <Select>
//             {negara.map(negara => (
//         <Option key={negara.Negara} value={negara.Negara}>
//        {negara.Negara}
//         </Option>
//       ))}
//             </Select>
//           </Form.Item>
//           </Col>
//           <Col span={8}>
//           <Form.Item name="Bruto" label="Gross Weight">
//           <InputNumber min={1} max={999999999999}  onChange={onChange}  style={{width: "100%"}}/>
//           </Form.Item>
//           </Col>
//           </Row>
//           {/* <Row gutter={20}>
//         <Col span={12}>
//           <Form.Item label="Nama Vessel">
//             <Input />
//           </Form.Item>
//           </Col>
//           <Col span={12}>
//           <Form.Item label="No. Voyage / Flight">
//             <Input />
//           </Form.Item>
//           </Col>
//           </Row> */}
//           <Row>
//           <Form.Item style={{width: "100%", display: "flex", justifyContent: "end"}}>
//             <Button type="primary" htmlType="submit" loading={loading}>Add Data</Button>
//           </Form.Item>
//           {formData && <pre>{JSON.stringify(formData, null, 2)}</pre>}
//           </Row>
//         </Form>
//       </>
//     );
//   };
// const ModalComponent = ({ visible, closeModal }) => {
  
//     return (
//       <Modal
//         title="Tambahkan Data Material"
//         visible={visible}
//         onCancel={closeModal}
//         footer={false}
//         width={1200}
//         style={{
//           top: 20,
//         }}
//       >
//         <FormDisabledDemo/>
//       </Modal>
//     );
//   };
  
//   export default ModalComponent;